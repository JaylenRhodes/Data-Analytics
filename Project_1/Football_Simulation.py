import math #Library for arithmetics
import random #Library for randomness

#Down function
#successprct is a number between 0-100 indicating probability of offensive success
#yardrange is a tuple with two values representing the minimum and maximum yards gained
#Return a number of yards according to the following rules:
    #i. A random number between 1 and 100 is generated - if it exceeds successprct then the play "fails" and 0 is returned
    #ii. Otherwise, the number of of yards returned is equal to a random number between the min and max according to yardrange
def down(successprct, yardrange):
    randomnumber = random.randint(1, 100)
    #If statement to test successprct
    if (randomnumber > successprct): #Play fails
        return 0

    else: #Play successfull
        yardsreturned = random.randint(yardrange[0], yardrange[1])
        return yardsreturned

#Drive function
#yards_to_TD is the number of yards a team must move the ball to achieve a touchdown
#successprct and yardrange are identical in form to the Down function
#The drive function must do the following: up to four downs will be executed in sequence using the Down function with successprct and yardrange as arguments
    #i. The number of yards generated by the Down function will be subtracted from from yards_to_TD on each call
    #ii. If yards_to_TD ever reaches zero or below, the team scores
    #iii. If four sequential plays take place and the team doesn't score, the ball is turned over to the other team with zero points scored
#The output of drive will be a tuple with two elements representing
    #i. Points scored
    #ii. Field position for the other team, respectively
#If the team scores, then the first element will be 7 (90% of an extra point attempt to succeed) or 6(10% of the attempt to fail) - otherwise the first value will be 0
#If the team scored, then the second element will be 80 (reflecting a kick-of/touchback position for the other team) - otherwise the second element will be calculated as 100-yards_to_TD (reflecting the other team moving the ball in the opposite direction)

def drive(yards_to_TD, successprct, yardrange):
    downCalls = 0
    for i in range (4):
        yards_to_TD -= down(successprct, yardrange)
        downCalls += 1
        if (yards_to_TD <= 0):
            pointattempt = random.randint(1, 100)

            if (pointattempt <= 90):
                return [7, 80]

            elif (pointattempt > 90):
                return [6,80]
                
        elif (downCalls == 4):
            return [0, (100 - yards_to_TD)]
            break

        else:
            i += 1

#Depiction of drive function
#Identical in form and return to Drive function, with the exception that it must also provide visual details of every down within the drive, including the progress of the side on offense
    #i.e. How many yards from their own end zone
#The yards remaining to touchdown 
    #i.e. How many yards from the opponent's end zone
def drive_depicted(yards_to_TD, successprct, yardrange):
    downCalls = 0
    for i in range (4):
        if (i == 0):
            print("1st Down", end= ' ')
            print('|--X--|----|----|----| {} Yards From Endzone, {} Yards to Touchdown'.format((100 - yards_to_TD), yards_to_TD))

        elif (i == 1):
            print("2nd Down", end= ' ')
            print('|----|--X--|----|----| {} Yards From Endzone, {} Yards to Touchdown'.format((100 - yards_to_TD), yards_to_TD))

        elif (i == 2):
            print("3rd Down", end= ' ')
            print('|----|----|--X--|----| {} Yards From Endzone, {} Yards to Touchdown'.format((100 - yards_to_TD), yards_to_TD))

        elif(i == 3):
            print("4th Down", end=' ')
            print('|----|----|----|--X--| {} Yards From Endzone, {} Yards to Touchdown'.format((100 - yards_to_TD), yards_to_TD))
        yards_to_TD -= down(successprct, yardrange)
        downCalls += 1

        if (yards_to_TD <= 0):
            pointattempt = random.randint(1, 100)

            if (pointattempt <= 90):
                print('|----|----|----|----Touchdown! Kick-off is good!')
                return [7, 80]

            elif (pointattempt > 90):
                print('|----|----|----|----Touchdown! Kick-off is bad')
                return [6,80]
                
        elif (downCalls == 4):
            print('Turnover', end= ' ')
            print('|----|----|----|----|X {} Yards From Endzone, {} Yards to Touchdown'.format((100 - yards_to_TD), yards_to_TD))
            return [0, (100 - yards_to_TD)]
            break

        else:
            i += 1

#Game simulation function
#i. Initialize scores for both teams at 0 and yards_to_TD at 80
#ii. Call the drive function, with yard_to_TD and T1's successprct/yardrange values
#iii. Increment T1's score according to drive's return and adjust yards_to_TD according to the second return
#iv. Call the drive function for T2 using its parameters
#v. Adjust T2's score if relevant
#vi. repeat steps ii-v num_drives time in total
def simulategame(num_drives, prctT1, yrangeT1, prctT2, yrangeT2):
    scoreT1 = 0
    scoreT2 = 0
    yards_to_TD = 80
    for i in range(num_drives):
        if (i <= num_drives):
            [driveST1,driveY2t] = drive(yards_to_TD, prctT1, yrangeT1)
            scoreT1 += driveST1
            [driveST2,driveY2t] = drive(yards_to_TD, prctT1, yrangeT2)
            scoreT2 += driveST2
            yards_to_TD = driveY2t
            return [scoreT1, scoreT2]
            i += 1
        
        else:
            break
    

